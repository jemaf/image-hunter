/*
 * ImgHunterView.java
 */
package imghunter;

import java.awt.GridLayout;
import java.awt.Image;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;

/**
 * The application's main frame.
 */
public class ImgHunterView extends FrameView {

    private MyImage image;
    private SketchFrame sketchFrame;

    public ImgHunterView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = ImgHunterApp.getApplication().getMainFrame();
            aboutBox = new ImgHunterAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ImgHunterApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jlblImg = new javax.swing.JLabel();
        srclImgs = new java.awt.ScrollPane();
        jlblHist = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        imgMenu = new javax.swing.JMenu();
        abrirImgMenu = new javax.swing.JMenu();
        loadImgMenuItem = new javax.swing.JMenuItem();
        loadSketchMenuItem = new javax.swing.JMenuItem();
        BWMenuItem = new javax.swing.JMenuItem();
        equalizarImgMenu = new javax.swing.JMenuItem();
        HistogramaMenu = new javax.swing.JMenu();
        gerarHistMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jfcimgChooser = new javax.swing.JFileChooser();

        mainPanel.setName("mainPanel"); // NOI18N

        jlblImg.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jlblHist.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlblHist, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jlblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(srclImgs, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(srclImgs, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlblHist, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText("File");
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(imghunter.ImgHunterApp.class).getContext().getActionMap(ImgHunterView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        imgMenu.setText("Imagem");

        abrirImgMenu.setText("Abrir");

        loadImgMenuItem.setText("Imagem");
        loadImgMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImgMenuItemActionPerformed(evt);
            }
        });
        abrirImgMenu.add(loadImgMenuItem);

        loadSketchMenuItem.setText("Rascunho");
        loadSketchMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSketchMenuItemActionPerformed(evt);
            }
        });
        abrirImgMenu.add(loadSketchMenuItem);

        imgMenu.add(abrirImgMenu);

        BWMenuItem.setText("Tons de Cinza");
        BWMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BWMenuItemActionPerformed(evt);
            }
        });
        imgMenu.add(BWMenuItem);

        equalizarImgMenu.setText("Equalizar Imagem");
        equalizarImgMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizarImgMenuActionPerformed(evt);
            }
        });
        imgMenu.add(equalizarImgMenu);

        menuBar.add(imgMenu);

        HistogramaMenu.setText("Histograma");

        gerarHistMenuItem.setText("Gerar Histograma");
        gerarHistMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerarHistMenuItemActionPerformed(evt);
            }
        });
        HistogramaMenu.add(gerarHistMenuItem);

        menuBar.add(HistogramaMenu);

        helpMenu.setText("Help");
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 525, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void gerarHistMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerarHistMenuItemActionPerformed

        if (this.image.getImg() != null) {

            Histograma hist = new Histograma(image);
            BufferedImage img = this.image.getImg();

            final ChartPanel panel = new ChartPanel(hist.getChart());
            JFrame f = new JFrame("Histograma");
            f.setSize(800, 600);

            try {
                ChartUtilities.saveChartAsJPEG(new File("histograma.JPG"), hist.getChart(), 800, 600);
                img = ImageIO.read(new File("histograma.JPG"));

                ImageIcon icon = new ImageIcon(MyImage.resizeImage
                        (img, jlblHist.getWidth(), jlblHist.getHeight()));

                jlblHist.setIcon(icon);

            } catch (IOException ex) {
                Logger.getLogger(ImgHunterView.class.getName()).log(Level.SEVERE, null, ex);
            }

            f.getContentPane().add(panel);
            f.setVisible(true);
        } else {
            JOptionPane.showConfirmDialog(null, "Selecione uma opção de imagem");
        }

    }//GEN-LAST:event_gerarHistMenuItemActionPerformed

    private void loadImgMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImgMenuItemActionPerformed
        this.jfcimgChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        this.jfcimgChooser.setDialogTitle("Escolha uma Imagem JPG");
        int res = this.jfcimgChooser.showOpenDialog(null);


        if (res == JFileChooser.APPROVE_OPTION) {
            try {
                //carrega a foto selecionada pelo usuario

                File f = this.jfcimgChooser.getSelectedFile();
                image = new MyImage(f.getAbsolutePath());

                //ajusta tamanho da imagem
                Image img = MyImage.resizeImage(image.getImg(), jlblImg.getWidth(),
                        jlblImg.getHeight());

                ImageIcon icon = new ImageIcon(img);
                jlblImg.setIcon(icon);

                JPanel p = new JPanel(new GridLayout(5,2,5,5));
                srclImgs.add(p);

                for(int i = 0; i < 10; i++ )
                    p.add(new JLabel(icon));

            } catch (IOException ex) {
                Logger.getLogger(ImgHunterView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//fim do if
    }//GEN-LAST:event_loadImgMenuItemActionPerformed

    private void BWMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BWMenuItemActionPerformed
        this.image.GerarTonsDeCinza();
        ImageIcon icon = new ImageIcon(image.getImg());
        jlblImg.setIcon(icon);
    }//GEN-LAST:event_BWMenuItemActionPerformed

    private void loadSketchMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSketchMenuItemActionPerformed
        this.sketchFrame = new SketchFrame(this.jlblImg);
        sketchFrame.setVisible(true);       
    }//GEN-LAST:event_loadSketchMenuItemActionPerformed

    private void equalizarImgMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizarImgMenuActionPerformed

        this.image.equalizar();

    }//GEN-LAST:event_equalizarImgMenuActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JMenuItem BWMenuItem;
    javax.swing.JMenu HistogramaMenu;
    javax.swing.JMenu abrirImgMenu;
    javax.swing.JMenuItem equalizarImgMenu;
    javax.swing.JMenuItem gerarHistMenuItem;
    javax.swing.JMenu imgMenu;
    javax.swing.JFileChooser jfcimgChooser;
    public javax.swing.JLabel jlblHist;
    public javax.swing.JLabel jlblImg;
    javax.swing.JMenuItem loadImgMenuItem;
    javax.swing.JMenuItem loadSketchMenuItem;
    javax.swing.JPanel mainPanel;
    javax.swing.JMenuBar menuBar;
    javax.swing.JProgressBar progressBar;
    java.awt.ScrollPane srclImgs;
    javax.swing.JLabel statusAnimationLabel;
    javax.swing.JLabel statusMessageLabel;
    javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
}
